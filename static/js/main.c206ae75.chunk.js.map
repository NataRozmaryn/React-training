{"version":3,"sources":["components/Calculator/index.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","useState","output","setOutput","variables","setVariables","operation","setOperation","curVariable","setCurVariable","useEffect","console","log","getPressBtn","e","key","target","value","vars","oper","isNaN","parseInt","indexOf","join","id","type","readOnly","onClick","res","x","parseFloat","y","Math","floor","toString","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c206ae75.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\n\nconst Calculator = () => {\n    const [output, setOutput] = useState(\"\");\n    const [variables, setVariables] = useState([\"\",\"\"]);    \n    const [operation, setOperation] = useState(\"\");\n    const [curVariable, setCurVariable] = useState(0);\n\n    const clearDisplay = () => {\n        setVariables([\"\", \"\"]);\n        setCurVariable(0);\n        setOperation(\"\");\n        setOutput(\"\");\n    }\n    useEffect (() => {\n        console.log(output);\n    });\n\n    const getPressBtn = (e) => {\n        //debugger;\n        let key = e.target.value;        \n        let vars = [...variables];\n        let oper = operation;\n\n        if ((!isNaN(parseInt(key)) || key === \".\")) {\n            if (key !== \".\" || vars[curVariable].indexOf(\".\") === -1)\n                vars[curVariable] += key;\n            setVariables(vars)\n        } else {\n            oper = key;\n            setOperation(oper);\n            setCurVariable(1);\n        }\n        setOutput([vars[0], oper, vars[1]].join(''));\n    }\n\n    const getResult = () => {        \n        let res; \n        let x = parseFloat(variables[0]);\n        let y = parseFloat(variables[1]);\n\n        switch (operation) {\n            case '+':\n                res = x + y;\n                break;  \n            case '-':\n                res = x - y;\n                break;   \n            case '*':\n                res = x * y; \n                break; \n            case '/':\n                res = x / y;\n                break;\n            default:\n                break;\n        }\n        // fix .00000001 in floating number operations\n        res = Math.floor(res * 100000)/100000;\n        console.log(\"result:\", res);\n        setOutput(res.toString());\n        setVariables([res.toString(), \"\"]);\n        setCurVariable(0);\n        setOperation(\"\");\n    }\n\n    return (\n    <form id='calc-contain'>\n        <input type=\"text\" id=\"result\" value={output} readOnly/>\n        <input type=\"button\" value=\"c\" onClick={clearDisplay} />\n         <br /> \n        <input type=\"button\" value=\"1\" onClick={getPressBtn} />  \n        <input type=\"button\" value=\"2\" onClick={getPressBtn} /> \n        <input type=\"button\" value=\"3\" onClick={getPressBtn} />\n        <input type=\"button\" value=\"/\" onClick={getPressBtn} /><br /> \n        <input type=\"button\" value=\"4\" onClick={getPressBtn} /> \n        <input type=\"button\" value=\"5\" onClick={getPressBtn} />  \n        <input type=\"button\" value=\"6\" onClick={getPressBtn} /> \n        <input type=\"button\" value=\"-\" onClick={getPressBtn} /><br /> \n        <input type=\"button\" value=\"7\" onClick={getPressBtn} />\n        <input type=\"button\" value=\"8\" onClick={getPressBtn} />\n        <input type=\"button\" value=\"9\" onClick={getPressBtn} />\n        <input type=\"button\" value=\"+\" onClick={getPressBtn} /><br />  \n        <input type=\"button\" value=\".\" onClick={getPressBtn} />\n        <input type=\"button\" value=\"0\" onClick={getPressBtn} />\n        <input type=\"button\" value=\"=\" onClick={getResult} />\n        <input type=\"button\" value=\"*\" onClick={getPressBtn} /><br />      \n   </form>\n   );\n}\n\nexport default Calculator;","import React, { } from 'react';\nimport Calculator from './components/Calculator';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}