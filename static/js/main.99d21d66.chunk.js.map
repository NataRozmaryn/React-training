{"version":3,"sources":["calcProcessor.js","components/DisplayField/index.js","components/Button/index.js","components/OperationBtn/index.js","components/DigitalBtn/index.js","components/Separator/index.js","constList.js","components/ButtonsGrid/index.js","components/History/index.js","components/Calculator/index.js","App.js","serviceWorker.js","index.js"],"names":["OperationButtons","add","subtract","multiply","divide","cancel","dot","evaluate","history","engineering","basic","sqrt","pow","log2","factorial","CalculatorProcessor","value","this","toString","updateExpression","n","operation","operationCb","histExpression","x","parseFloat","processOperation","push","indexOf","processDigit","processUnaryOperation","Math","reset","res","eval","floor","CalcProcessor","DisplayField","type","id","readOnly","Button","values","onClick","Array","isArray","map","button","key","OperationBtn","DigitalBtn","Separator","CalculatorButtons","engineeringCalculatorButtons","splice","ButtonsGrid","buttons","buttonClick","index","ButtonComponent","History","calcProcessor","onClear","list","item","clearHistory","Calculator","state","output","openHistory","moreOption","calcBtns","onButtonClick","buttonType","buttonValue","memory","setState","btns","onHistSelect","val","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.99d21d66.chunk.js","sourcesContent":["export const OperationButtons = {\n    add: \"+\",\n    subtract: \"-\",\n    multiply: \"*\",\n    divide: \"/\",\n    cancel: \"C\",\n    dot: \".\",\n    evaluate: \"=\",\n    history: \"hist\",\n    engineering: \"more\",\n    basic: \"less\",\n    sqrt: \"sqrt\",\n    pow: \"pow\",\n    log2: \"log2\",\n    factorial: \"n!\"\n};\n\nclass CalculatorProcessor {\n    #variables = [\"\",\"\"];\n    #operation = \"\";\n    #curVariable = 0;\n    #expression = \"\";\n    #history = [];\n\n    processDigit(value) {\n        this.#variables[this.#curVariable] += value.toString();\n        this.updateExpression();\n    }\n\n    reset() {\n        this.#expression = \"\";\n        this.#curVariable = 0;\n        this.#variables = [\"\",\"\"];\n        this.#operation = \"\";\n    }\n\n    updateExpression() {\n        if(this.#operation === \"pow\") {\n            this.#expression = \"pow(\" + this.#variables[0] + \", \" + this.#variables[1] + \")\";\n        } else {\n            this.#expression = this.#variables[0] + this.#operation + this.#variables[1];\n        }\n    }\n    factorial(n) {\n        return (n !== 1) ? n * this.factorial(n - 1) : 1;\n    }\n\n    processUnaryOperation(operation, operationCb) {\n        let histExpression;\n        let x = parseFloat(this.#variables[0]);\n        if (this.#curVariable === 1) {\n            this.processOperation('=');\n        }\n        histExpression = operation+'('+this.#variables[0]+')';\n        this.#variables[0] = operationCb(x).toString();\n        this.#history.push([this.#variables[0], histExpression]);\n    }\n\n    processOperation(operation) {        \n        switch (operation) {\n            case OperationButtons.add:\n            case OperationButtons.subtract:\n            case OperationButtons.multiply:\n            case OperationButtons.divide:\n            case OperationButtons.pow:\n                this.#operation = operation;\n                this.#curVariable = 1;\n                break;\n            case OperationButtons.dot:\n                if (this.#variables[this.#curVariable].indexOf(operation) === -1)\n                    this.processDigit(operation)\n                break;\n            case OperationButtons.sqrt:\n                this.processUnaryOperation(operation, (x) => Math.sqrt(x));\n                break;\n            case OperationButtons.log2:\n                this.processUnaryOperation(operation, (x) => Math.log2(x));\n                break;\n            case OperationButtons.factorial: \n                this.processUnaryOperation(operation, (x) => this.factorial(x));\n                break;\n            case OperationButtons.cancel:\n                this.reset();\n                break;\n            case OperationButtons.evaluate:\n                if (this.#curVariable === 1 && this.#variables[1] !== '') {\n                    let res;\n                    let histExpression;\n                    if(this.#operation === \"pow\") {\n                        res = Math.pow(parseFloat(this.#variables[0]), parseFloat(this.#variables[1]));\n                        histExpression = \"pow(\" + this.#variables[0] + \", \" + this.#variables[1] + \")\";\n                    } else {\n                        // eslint-disable-next-line no-eval\n                        res = eval(this.#expression);\n                        histExpression = this.#variables[0] + this.#operation + this.#variables[1];\n                    }\n                    // fix .00000001 in floating number operations\n                    res = Math.floor(res * 100000)/100000;\n                    this.#history.push([res, histExpression]);\n                    this.reset();\n                    this.#expression = res.toString(); \n                    this.#variables[0] = this.#expression;\n                } else {\n                    this.#operation = '';\n                    this.#curVariable = 0;\n                }\n                break;\n            default:\n                break;\n        }\n        this.updateExpression();\n    }\n    get output() {\n        return this.#expression;\n    }\n    get history() {\n        return this.#history;\n    }\n    clearHistory() {\n        this.#history = [];\n    }\n}\n\nconst CalcProcessor = new CalculatorProcessor();\n\nexport default CalcProcessor;","import React, { } from 'react';\n\nconst DisplayField = ({value}) => {\n  return (\n      <input type=\"text\" id=\"result\" value={value} readOnly/>\n  );\n}\n\nexport default DisplayField;","import React, { } from 'react';\n\nconst Button = ({values, onClick}) => {\n  let buttons = Array.isArray(values) ? values : [values];\n  return (\n    buttons.map((button) => {\n      return <input type=\"button\" key={button} value={button} onClick={() => onClick(button)}/>\n    })\n  );\n}\n\nexport default Button;","import React, { } from 'react';\nimport Button from '../Button';\n\nconst OperationBtn = ({values, onClick}) => {\n  return (\n    // @ts-ignore\n    <Button values={values} onClick={onClick} />\n  );\n}\n\nexport default OperationBtn;","import React, { } from 'react';\nimport Button from '../Button';\n\nconst DigitalBtn = ({values,onClick}) => {\n  return (\n        // @ts-ignore\n        <Button values={values} onClick={onClick} />      \n  );\n}\nexport default DigitalBtn;","import React, { } from 'react';\n\nconst Separator = ({values}) => {\n  return (\n    <br/>\n  );\n}\n\nexport default Separator;","import OperationBtn from \"./components/OperationBtn\";\nimport DigitalBtn from \"./components/DigitalBtn\";\nimport Separator from \"./components/Separator\";\nimport { OperationButtons } from \"./calcProcessor\";\n\nexport const CalculatorButtons = \n[\n    [OperationBtn, [OperationButtons.history, OperationButtons.engineering, OperationButtons.cancel]],\n    [Separator],\n    [DigitalBtn, [1,2,3]],\n    [OperationBtn, OperationButtons.divide],\n    [Separator],\n    [DigitalBtn, [4,5,6]],\n    [OperationBtn, OperationButtons.subtract],\n    [Separator],\n    [DigitalBtn, [7,8,9]],\n    [OperationBtn, OperationButtons.add],\n    [Separator],\n    [OperationBtn, OperationButtons.dot],\n    [DigitalBtn, [0]],\n    [OperationBtn, [OperationButtons.evaluate, OperationButtons.multiply]],\n]\nexport const engineeringCalculatorButtons = [...CalculatorButtons];\nengineeringCalculatorButtons.splice(\n    2,0,[OperationBtn, \n        [OperationButtons.sqrt, OperationButtons.pow,\n            OperationButtons.log2, OperationButtons.factorial]], [Separator]\n    );\nengineeringCalculatorButtons.splice(\n    0,1,[OperationBtn, [OperationButtons.history, OperationButtons.basic, OperationButtons.cancel]]);","import React, { } from 'react';\n\nconst ButtonsGrid = ({buttons, onClick}) => {\n  const buttonClick = (button, value) => {\n    onClick(button, value);\n  }\n  return (\n    buttons.map((button, index) => {\n      let ButtonComponent = button[0];\n      return <ButtonComponent key={index} values={button[1]} onClick={(value) => buttonClick(button[0], value)}/>\n    })\n  );\n}\n\nexport default ButtonsGrid;","import React from 'react';\nimport Button from '../../components/Button'\n\nconst History = ({calcProcessor, onClick, onClear}) => {\n  const ClearHistory = () => {\n    calcProcessor.clearHistory();\n    onClear();\n  }\n \n  let list = calcProcessor.history;\n\n  return (\n    <>\n      <ul>\n          {list && \n            list.map((item, index) => {\n                return <li key={index} onClick={() => onClick(item[0])}>{item[1]}</li>\n                })\n            }\n      </ul>\n      <Button values=\"Clear\" onClick={ClearHistory}/>\n    </>\n  );\n}\n\nexport default History;","import React, {Component} from 'react';\nimport DisplayField from '../DisplayField';\nimport { CalculatorButtons, engineeringCalculatorButtons } from '../../constList';\n\nimport CalcProcessor, { OperationButtons } from '../../calcProcessor';\nimport ButtonsGrid from '../ButtonsGrid';\nimport DigitalBtn from '../DigitalBtn';\nimport OperationBtn from '../OperationBtn';\nimport History from '../History';\n\nclass Calculator extends Component {\n    state = {\n        output: '',\n        openHistory: 0,\n        moreOption: 0,\n        calcBtns: CalculatorButtons\n    }\n\n    onButtonClick = (buttonType, buttonValue) => {\n        let res, memory;\n        switch (buttonType) {\n            case DigitalBtn:    \n                CalcProcessor.processDigit(buttonValue);\n                break;\n            case OperationBtn:\n                switch(buttonValue)\n                {\n                    case OperationButtons.history:\n                        this.setState({openHistory: 1});\n                        break;\n                    case OperationButtons.basic:\n                    case OperationButtons.engineering:\n                        let btns;\n                        this.setState({moreOption: !this.state.moreOption}, () => {\n                            btns = this.state.moreOption ? engineeringCalculatorButtons : CalculatorButtons;\n                            this.setState({calcBtns: btns});\n                        });\n                        break;\n                    default:\n                        CalcProcessor.processOperation(buttonValue);\n                        break;\n                }\n            break;\n            default:\n                break;\n        }\n        res = CalcProcessor.output;\n        memory = CalcProcessor.history;\n        this.setState({output: res});\n        this.setState({history: memory});\n    }\n    onHistSelect = (val) => {\n        this.setState({output: val, openHistory: 0});\n    }\n    clearHistory = () => {\n        this.setState({history: CalcProcessor.history, openHistory: 0});\n    }\n    render() {\n        const output = this.state.output;\n        const openHistory = this.state.openHistory;\n        const calcBtns = this.state.calcBtns;\n        return (\n        <form id='calc-contain'>\n            <DisplayField value={output}/>\n            {openHistory ? <History calcProcessor={CalcProcessor} onClick={this.onHistSelect} onClear={this.clearHistory}/> :\n            <ButtonsGrid buttons={calcBtns} onClick={this.onButtonClick}/>}   \n        </form> \n    );\n    }\n}\n\nexport default Calculator;","import React, { } from 'react';\nimport Calculator from './components/Calculator';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}